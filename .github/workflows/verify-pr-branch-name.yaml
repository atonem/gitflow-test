# TODO:
# store step output
# https://stackoverflow.com/a/57989070
# create issue/pr comment: https://octokit.github.io/rest.js/v18#issues-create-comment
# update review comment: https://octokit.github.io/rest.js/v18#pulls-update-review-comment
name: "Verify PR Branch Name"
on:
  pull_request_target:
    branches:
      - master
      - develop
jobs:
  verify_base_head_branch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        id: verify_branch_name
        with:
          result-encoding: string
          script: |
            const VALID_DEVELOP_HEAD_NAMES = [
              /^feature\/.+/,
              /^bugfix\/.+/,
              /^backmerge\/.+/,
              /^master$/,
            ];
            const VALID_MASTER_HEAD_NAMES = [/^release\/.+/, /^hotfix\/.+/];
            const MASTER_NAME = 'master';
            const DEVELOP_NAME = 'develop';
            const { base, head } = context.payload.pull_request ?? {};
            const BASE_NAME = base?.ref;
            const HEAD_NAME = head?.ref;
            function verifyHeadName(baseName, headName) {
              switch (baseName) {
                case MASTER_NAME:
                  return VALID_MASTER_HEAD_NAMES.some(t => t.test(headName));
                case DEVELOP_NAME:
                  return VALID_DEVELOP_HEAD_NAMES.some(t => t.test(headName));
                default:
                  return false;
              }
            }
            const successMessageTemplate = (
              baseName,
              headName,
            ) => `## :white_check_mark: Verify branch name: success
            \`${headName}\` is a **valid** branch to merge in to \`${baseName}\`.
            `;
            const failureMessageTemplate = (
              baseName,
              headName,
            ) => `## :x: Verify branch name: failure
            \`${headName}\` is an **invalid** branch to merge in to \`${baseName}\`.

            ### Valid branch head patterns
            ${(baseName === DEVELOP_NAME ? VALID_DEVELOP_HEAD_NAMES : VALID_MASTER_HEAD_NAMES).map(pattern => `- \`${pattern}\``).join('\n')}
            `;
            let success = false;
            if (BASE_NAME && HEAD_NAME) {
              const success2 = verifyHeadName(BASE_NAME, HEAD_NAME);
              const message = success2
                ? successMessageTemplate(BASE_NAME, HEAD_NAME)
                : failureMessageTemplate(BASE_NAME, HEAD_NAME);
              core.summary.addRaw(message, true);
              core.setOutput('statusMessage', message);
              if (!success2) {
                core.setFailed(`${HEAD_NAME} can't be merged into ${BASE_NAME}`);
              }
            } else {
              core.setFailed(
                `Could not get PR head ("${HEAD_NAME}") and/or base ("${BASE_NAME}") name`,
              );
            }

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: github.event.pull_request.number
          comment-author: github-actions
          body-includes: Verify branch name

      - name: Create or update comment
        if: '!cancelled()'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: steps.find_comment.outputs.comment-id
          issue-number: github.event.pull_request.number
          body: steps.verify_branch_name.outputsa.statusMessage
          edit-mode: replace
